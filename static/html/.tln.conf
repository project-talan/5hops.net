module.exports = {
  tags: () => [],
  envs: () => ['./.env'],
  options: () => [],
  inherits: () => [],
  depends: () => [],
  variables: () => [],
  steps: () => [
    {
      id: 'prereq',
      desc: '',
      script: (context) => [
        "envsubst > sonar-project.properties < sonar-project.properties.template",
        "envsubst > .env < .env.template",
        "npm i"
      ]
    },
    {
      id: 'build',
      desc: '',
      script: (context) => [
        "ng build"
      ]
    },
    {
      id: 'test',
      desc: '',
      script: (context) => [
        "ng test ${COMPONENT_ID} --code-coverage"
      ]
    },
    {
      id: 'lint',
      desc: '',
      script: (context) => [
        "ng lint ${COMPONENT_ID} --format=prose --type-check=true"
      ]
    },
    {
      id: 'sonar',
      desc: '',
      script: (context) => [
        "#~/projects/sonar-scanner-3.0.3.778/bin/sonar-scanner -X"
      ]
    },
    {
      id: 'build-prod',
      desc: '',
      script: (context) => [
          "ng build --configuration=production"
      ]
    },
    {
      id: 'serve',
      desc: '',
      script: (context) => [
        "ng serve --host=${COMPONENT_PARAM_LSTN} --port=${COMPONENT_PARAM_PORT}"
      ]
    },
    {
      id: 'docker-build',
      desc: '',
      script: (context) => [
        "rm -rf ./target || true",
        "mkdir target",
        "mkdir target/conf.d",
        "if [ -d ./ssl ]",
          "then",
        "  envsubst '\\${COMPONENT_ID} \\${COMPONENT_PARAM_HOST}' > ./target/conf.d/default.conf < ./default.conf.https.template",
        "  cp -r ./ssl ./target/",
        "else",
        "  envsubst '\\${COMPONENT_PARAM_HOST}' > ./target/conf.d/default.conf < ./default.conf.template",
        "fi",
        "docker build \\",
        "  -t ${COMPONENT_ID}:${COMPONENT_VERSION} ."
      ]
    },
    {
      id: 'docker-run',
      desc: '',
      script: (context) => [
        "docker run -d --rm \\",
        "  -p ${COMPONENT_PARAM_PORT}:80 \\",
        "  -p ${COMPONENT_PARAM_PORTS}:443 \\",
        "  --name ${COMPONENT_ID} ${COMPONENT_ID}:${COMPONENT_VERSION}"
      ]
    },
    {
      id: 'docker-save',
      desc: '',
      script: (context) => [
        "docker save -o ${COMPONENT_ID}-${COMPONENT_VERSION}.tar ${COMPONENT_ID}:${COMPONENT_VERSION}"
      ]
    },
    {
      id: 'docker-load',
      desc: '',
      script: (context) => [
        "docker load -i ${COMPONENT_ID}-${COMPONENT_VERSION}.tar"
      ]
    },
    {
      id: 'docker-stop',
      desc: '',
      script: (context) => [
        "docker stop ${COMPONENT_ID}",
        "docker rmi ${COMPONENT_ID}:${COMPONENT_VERSION}"
      ]
    }
  ],
  components: () => []
};
